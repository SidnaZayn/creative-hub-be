// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  spaces    Space[]
  createdAt DateTime @default(now())
}

model Space {
  id           String   @id @default(uuid())
  ownerId      String
  categoryId   String?
  name         String
  description  String?
  city         String?
  address      String?
  features     Json?
  capacity     Int
  pricePerHour Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  category     Category?      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  SpaceImage   SpaceImage[]
  SpaceSession SpaceSession[]
}

model SpaceImage {
  id        String   @id @default(uuid())
  spaceId   String
  filename  String
  size      BigInt
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  space Space? @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

enum BookingStatus {
  UNPAID
  PAID
  CANCEL
}

enum Days {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model SpaceSession {
  id        String   @id @default(uuid())
  day       Days
  startTime String?
  endTime   String?
  price     Float?
  capacity  Int?
  notes     String?
  spaceId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  space   Space?    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  Booking Booking[]
}

model Booking {
  id             String        @id @default(uuid())
  date           DateTime
  spaceSessionId String?
  spaceId        String?
  status         BookingStatus @default(UNPAID)
  userId         String?
  name           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  spaceSession SpaceSession? @relation(fields: [spaceSessionId], references: [id], onDelete: Cascade)
}

model Policy {
  id        String   @id @default(uuid())
  policy    String
  spaceId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
